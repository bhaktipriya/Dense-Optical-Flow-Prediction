from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Reshape, Permute
from keras.layers import Convolution2D, MaxPooling2D, ZeroPadding2D, UpSampling2D
from keras.optimizers import SGD
from keras.utils import np_utils
import pickle
import numpy as np
import hmdb51

batch_size = 32
nb_epoch = 200
data_augmentation = False

# input image dimensions
img_rows, img_cols = 32, 32
# the images are grayscale
#img_channels = 3

nb_classes = img_rows*img_cols*2 

(X_train, y_train), (X_test, y_test) = hmdb51.load_data()

model = Sequential()

print X_train.shape, y_train.shape
print X_train[0].shape, y_train[0].shape

print X_test.shape, y_test.shape
print X_test[0].shape, y_test[0].shape
print type(X_train), type(y_train)

n_segments=40

model_seg = Sequential()
model_seg.add(ZeroPadding2D((1,1),input_shape=(3,200,200)))
model_seg.add(Convolution2D(64, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(64, 3, 3, activation='relu'))
model_seg.add(MaxPooling2D((2,2), strides=(2,2)))

model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(128, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(128, 3, 3, activation='relu'))
model_seg.add(MaxPooling2D((2,2), strides=(2,2)))

model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(256, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(256, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(256, 3, 3, activation='relu'))
model_seg.add(MaxPooling2D((2,2), strides=(2,2)))

model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(512, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(512, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(512, 3, 3, activation='relu'))
model_seg.add(MaxPooling2D((2,2), strides=(2,2)))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(512, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(512, 3, 3, activation='relu'))
model_seg.add(ZeroPadding2D((1,1)))
model_seg.add(Convolution2D(512, 3, 3, activation='relu'))
model_seg.add(Convolution2D(1024, 7, 7, activation='relu', border_mode='same'))
model_seg.add(Dropout(0.5))
model_seg.add(Convolution2D(1024, 1, 1, activation='relu', border_mode='same'))
model_seg.add(Dropout(0.5))
model_seg.add(Convolution2D(n_segments, 1, 1, activation='relu', border_mode='same'))
model_seg.add(UpSampling2D((2,2)))
model_seg.add(Convolution2D(n_segments, 4, 4, activation='relu', border_mode='same'))
model_seg.add(UpSampling2D((2, 2)))
model_seg.add(Convolution2D(n_segments, 8, 8, activation='sigmoid', border_mode='same'))
model_seg.add(Reshape((n_segments,48*48)))
model_seg.add(Permute((2,1)))
model_seg.add(Activation('softmax'))


#model_seg.add(UpSampling2D((4, 4)))
#model_seg.add(ZeroPadding2D((2,4)))
#model_seg.add(Convolution2D(n_segments, 8, 8, activation='sigmoid', border_mode='same'))
#model_seg.add(Convolution2D(n_segments, 1, 1, activation='sigmoid', border_mode='same'))
#Output 50*50
#model_seg.add(ZeroPadding2D((2,0)))


model_seg.summary()

# let's train the model using SGD + momentum (how original).
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model_seg.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])


if not data_augmentation:
    print('Not using data augmentation.')
    model_seg.fit(X_train, y_train,
              batch_size=batch_size,
              nb_epoch=nb_epoch,
              validation_data=(X_test, y_test),
	      verbose=True,
              shuffle=True)
else:
    print('Using real-time data augmentation.')

    # fit the model on the batches generated by datagen.flow()
    model_seg.fit_generator(datagen.flow(X_train, Y_train,
                        batch_size=batch_size),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=nb_epoch,
                        validation_data=(X_test, Y_test))

model_seg.save_weights('trained_model.h5')
